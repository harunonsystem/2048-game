name: Delete Cloudflare Workers

on:
  pull_request:
    types: [closed]
  workflow_dispatch:
    inputs:
      worker_prefix:
        description: 'Worker prefix (e.g., "2048-game-pr" or "example-")'
        type: string
        default: '2048-game-pr-' # Default for PR workers
      worker_numbers:
        description: 'Numbers to delete (e.g., "1,2,3")'
        required: true
        type: string
      worker_names:
        description: 'Full names (optional, overrides prefix+numbers)'
        type: string
      confirm_deletion:
        description: 'Type "DELETE" to confirm'
        required: true
        type: string

env:
  DEFAULT_WORKER_PREFIX: '2048-game-pr-'

permissions:
  contents: read
jobs:
  delete-workers:
    runs-on: ubuntu-latest
    if: >
      (github.event_name == 'pull_request' && github.event.pull_request.head.ref != 'main') ||
      github.event_name == 'workflow_dispatch'
    
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Validate
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.confirm_deletion }}" != "DELETE" ]; then
            echo "‚ùå Must type 'DELETE' to confirm"
            exit 1
          fi

      - name: Load secrets
        id: load-secrets
        uses: ./.github/actions/load-1password-secrets
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

      - name: Delete workers
        run: |
          # Set PREFIX based on worker_prefix availability
          if [ -n "${{ github.event.inputs.worker_prefix }}" ]; then
            # workflow_dispatch: worker_prefix exists
            PREFIX="${{ github.event.inputs.worker_prefix }}"
          else
            # pull_request: worker_prefix doesn't exist
            PREFIX="$DEFAULT_WORKER_PREFIX"
          fi
          
          # Generate worker list
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            WORKERS=("${PREFIX}${{ github.event.pull_request.number }}")
          elif [ -n "${{ github.event.inputs.worker_names }}" ]; then
            IFS=',' read -ra WORKERS <<< "${{ github.event.inputs.worker_names }}"
          else
            IFS=',' read -ra NUMS <<< "${{ github.event.inputs.worker_numbers }}"
            WORKERS=()
            for num in "${NUMS[@]}"; do
              num=$(echo $num | tr -d ' ')
              WORKERS+=("${PREFIX}${num}")
            done
          fi
          
          # Delete workers
          SUCCESS=0 NOTFOUND=0 ERROR=0
          for worker in "${WORKERS[@]}"; do
            worker=$(echo "$worker" | tr -d ' ')
            [ -z "$worker" ] && continue
            
            echo "Processing: $worker"
            
            # Check exists
            status=$(curl -s -o /dev/null -w "%{http_code}" \
              -H "Authorization: Bearer ${{ steps.load-secrets.outputs.CLOUDFLARE_API_TOKEN }}" \
              "https://api.cloudflare.com/client/v4/accounts/${{ steps.load-secrets.outputs.CLOUDFLARE_ACCOUNT_ID }}/workers/scripts/$worker")
            
            case $status in
              200)
                # Delete
                del_status=$(curl -s -o /dev/null -w "%{http_code}" -X DELETE \
                  -H "Authorization: Bearer ${{ steps.load-secrets.outputs.CLOUDFLARE_API_TOKEN }}" \
                  "https://api.cloudflare.com/client/v4/accounts/${{ steps.load-secrets.outputs.CLOUDFLARE_ACCOUNT_ID }}/workers/scripts/$worker")
                
                if [ "$del_status" = "200" ]; then
                  echo "  ‚úÖ Deleted"
                  SUCCESS=$((SUCCESS + 1))
                else
                  echo "  ‚ùå Delete failed"
                  ERROR=$((ERROR + 1))
                fi
                ;;
              404)
                echo "  ‚ÑπÔ∏è Not found"
                NOTFOUND=$((NOTFOUND + 1))
                ;;
              *)
                echo "  ‚ö†Ô∏è Check failed"
                ERROR=$((ERROR + 1))
                ;;
            esac
          done
          
          # Summary
           echo ""
           echo "üìä Results: ‚úÖ$SUCCESS ‚ÑπÔ∏è$NOTFOUND ‚ùå$ERROR"
           
           if [ $ERROR -gt 0 ]; then
             echo "‚ö†Ô∏è Some operations failed. Check the logs above for details."
             exit 1
           fi
